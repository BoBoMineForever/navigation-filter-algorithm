%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%                   卡尔曼滤波修正程序(利用GPS进行位置速度组合)
%
%  输入参数:
%           attiN-导航计算的姿态角度横滚，俯仰，航向（度，度，度）；
%           veloN-飞行器相对机体系的运动速度东向、北向、天向（米/秒）；
%           posiN-导航计算输出的飞行器位置（经度（度）、纬度（度）、高度（米））； 
%           Xc-综合模型状态量；误差修正量
%  输出参数：         
%           attiN-修正后的导航计算的姿态角度横滚，俯仰，航向（度，度，度）；
%           veloN-修正后的飞行器相对机体系的运动速度东向、北向、天向（米/秒）；
%           posiN-修正后的导航计算输出的飞行器位置（经度（度）、纬度（度）、高度（米））； 
%
%                           程序设计：熊智  日期：2003/10/05
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [attiN,veloN,posiN]=ukf_modi(attiN,veloN,posiN,Xu)



  veloN(1,1) = veloN(1,1)-Xu(1,1);  % m/s
  veloN(2,1) = veloN(2,1)-Xu(2,1);
  veloN(3,1) = veloN(3,1)-Xu(3,1);  
    %飞行器速度修正

  posiN(1,1) = posiN(1,1) - Xu(9,1)*180.0/pi; % deg
  posiN(2,1) = posiN(2,1) - Xu(8,1)*180.0/pi; % deg
  posiN(3,1) = posiN(3,1) - Xu(10,1);          % m
    %飞行器位置修正
  
  %return;
  
  roll=attiN(1,1)*pi/180.0;pitch=attiN(2,1)*pi/180.0;head=attiN(3,1)*pi/180.0;
  
  Q=[cos(head/2)*cos(pitch/2)*cos(roll/2)+sin(head/2)*sin(pitch/2)*sin(roll/2);
     cos(head/2)*sin(pitch/2)*cos(roll/2)+sin(head/2)*cos(pitch/2)*sin(roll/2);
     cos(head/2)*cos(pitch/2)*sin(roll/2)-sin(head/2)*sin(pitch/2)*cos(roll/2);
     -1.0*sin(head/2)*cos(pitch/2)*cos(roll/2)+cos(head/2)*sin(pitch/2)*sin(roll/2)];
  Q(1,1)=Q(1,1)-Xu(4,1);      
  Q(2,1)=Q(2,1)-Xu(5,1);    
  Q(3,1)=Q(3,1)-Xu(6,1);    
  Q(4,1)=Q(4,1)-Xu(7,1);   
  %%%%%%%%%%四元数规范化%%%%%%%%%
  tmp_Q=sqrt(Q(1,1)^2+Q(2,1)^2+Q(3,1)^2+Q(4,1)^2);
  for kc=1:4
    Q(kc,1)=Q(kc,1)/tmp_Q;    
  end
  %%%%%%%%%%获取姿态矩阵%%%%%%%%%
  Cbn=[Q(2,1)^2+Q(1,1)^2-Q(4,1)^2-Q(3,1)^2, 2*(Q(2,1)*Q(3,1)+Q(1,1)*Q(4,1)), 2*(Q(2,1)*Q(4,1)-Q(1,1)*Q(3,1));
       2*(Q(2,1)*Q(3,1)-Q(1,1)*Q(4,1)), Q(3,1)^2-Q(4,1)^2+Q(1,1)^2-Q(2,1)^2,  2*(Q(3,1)*Q(4,1)+Q(1,1)*Q(2,1));
       2*(Q(2,1)*Q(4,1)+Q(1,1)*Q(3,1)), 2*(Q(3,1)*Q(4,1)-Q(1,1)*Q(2,1)), Q(4,1)^2-Q(3,1)^2-Q(2,1)^2+Q(1,1)^2]; 
  %姿态矩阵修正N--->B

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %求姿态(横滚、俯仰、航向）
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  attiN(1,1)=atan(-Cbn(1,3)/Cbn(3,3));
  attiN(2,1)=atan(Cbn(2,3)/sqrt(Cbn(2,1)*Cbn(2,1)+Cbn(2,2)*Cbn(2,2)));
  attiN(3,1)=atan(Cbn(2,1)/Cbn(2,2));
    %单位：弧度

  %象限判断
  attiN(1,1)=attiN(1,1)*180.0/pi;
  attiN(2,1)=attiN(2,1)*180.0/pi;
  attiN(3,1)=attiN(3,1)*180.0/pi;
    % 单位：度

  if(Cbn(2,2)<0 ) 
   attiN(3,1)=180.0+attiN(3,1);
  else 
   if(Cbn(2,1)<0) attiN(3,1)=360.0+attiN(3,1); end
  end
    %航向角度（单位：度）

  if(Cbn(3,3)<0)
   if(Cbn(1,3)>0) attiN(1,1)=180.0-attiN(1,1); end
   if(Cbn(1,3)<0) attiN(1,1)=-(180.0+attiN(1,1)); end
  end
    %横滚角度（单位：度）


